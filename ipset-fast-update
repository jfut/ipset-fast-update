#!/bin/bash
#
# Fast update of IP set for ipset
#
# Recommend:
#   - RHEL/CentOS/AlmaLinux/Rocky Linux: vi /etc/sysconfig/ipset-config
#     IPSET_SAVE_ON_STOP="yes"
#
# Copyright (C) 2018-2023 Jun Futagawa (jfut)
#
# This software is released under the MIT License.
# http://opensource.org/licenses/mit-license.php

set -euo pipefail

VERSION="1.5.0"

ALERT_THRESHOLD_RATIO="80"
IS_TEMPORARY="0"
IS_VERBOSE="0"
IS_FORCE="0"

# If you change this, you need destroy current set and create new one.
IPSET_MAXELEM="4294967295"

IPSET_CONFIG="/etc/sysconfig/ipset-config"
STATE_DIR="/var/lib/ipset-fast-update"

unset LIST_FILE
unset TMP_LIST_FILE
unset TMP_LIST_CURRENT_FILE

trap atexit EXIT
trap 'rc=$?; trap - EXIT; atexit; exit $?' INT PIPE TERM

# Usage
usage() {
    cat << _EOF_
$(basename ${0}) ${VERSION}

Usage:
    $(basename ${0}) -n SET_NAME [-i PATH]... [-u URL]... [-e EXCLUDE_PATH]... [OPTIONS...]

Options:
    -n IP set name of ipset
    -i include IP set from file path
    -u include IP set from url
    -e exclude IP set file path
    -d state directory (default: /var/lib/ipset-fast-update)
    -f fource update
    -r alert threshold ratio (default: 80)
        If the threshold is exceeded, the list will not be updated without the -f option.
    -t temporary mode
        This option does not "/usr/libexec/ipset/ipset.start-stop save" for persistent settings.
    -v verbose mode
    -h help

    If the "iprange" command exists, then it is used for optimization.
    https://github.com/firehol/iprange

EXAMPLES
    $(basename ${0}) -n ALLOW_LIST_JP -u https://ipv4.fetus.jp/jp.txt

    $(basename ${0}) -n ALLOW_LIST_FILE \\
        -i list1.txt \\
        -i list2.txt \\
        -i list3.txt

    $(basename ${0}) -n DENY_LIST \\
        -u https://raw.githubusercontent.com/borestad/firehol-mirror/main/firehol_level1.netset \\
        -u https://raw.githubusercontent.com/borestad/firehol-mirror/main/firehol_level2.netset \\
        -u https://raw.githubusercontent.com/borestad/firehol-mirror/main/firehol_level3.netset \\
        -u https://raw.githubusercontent.com/borestad/firehol-mirror/main/firehol_level4.netset \\
        -u https://raw.githubusercontent.com/borestad/firehol-mirror/main/firehol_anonymous.netset \\
        -e exclude1.txt \\
        -e exclude2.txt

    $(basename ${0}) -n DENY_MIX_LIST \\
        -i list1.txt \\
        -i list2.txt \\
        -u https://raw.githubusercontent.com/borestad/firehol-mirror/main/firehol_level1.netset

_EOF_
}

atexit() {
    if [[ "${IS_VERBOSE}" -eq 0 ]]; then
        if [[ ! -z "${LIST_FILE}" ]]; then
            rm -f "${LIST_FILE}"
        fi
        if [[ ! -z "${TMP_LIST_FILE}" ]]; then
            rm -f "${TMP_LIST_FILE}"
        fi
        if [[ ! -z "${TMP_LIST_CURRENT_FILE}" ]]; then
            rm -f "${TMP_LIST_CURRENT_FILE}"
        fi
    fi
}

file_ipset() {
    local LIST_FILE="${1}"
    shift
    local FILE_LIST="${@}"

    local FILE=""
    for FILE in ${FILE_LIST}; do
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ${FILE}"
        cat "${FILE}" >> "${LIST_FILE}"
    done
}

download_ipset() {
    local LIST_FILE="${1}"
    shift
    local URL_LIST="${@}"

    local URL=""
    for URL in ${URL_LIST}; do
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ${URL}"
        curl -s --retry 3 "${URL}" >> "${LIST_FILE}"
    done
}

exclude_ipset() {
    local LIST_FILE="${1}"
    shift
    local EXCLUDE_FILE_LIST="${@}"

    TMP_LIST_FILE="${LIST_FILE}.tmp"
    local FILE=""
    for FILE in ${EXCLUDE_FILE_LIST}; do
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ${FILE}"
        local EXCLUDE_IP_LIST=$(cat "${FILE}" | grep -E -v "^$|^#")
        local IP=""
        for IP in ${EXCLUDE_IP_LIST}
        do
            [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- Exclude IP: ${IP}"
            set +e
            grep -E -v "^${IP}$" "${LIST_FILE}" > "${TMP_LIST_FILE}"
            set -e
            cat "${TMP_LIST_FILE}" > "${LIST_FILE}"
        done
    done
    rm -f "${TMP_LIST_FILE}"
}

diff_ratio() {
    local SET_NAME="${1}"
    local LIST_CURRENT_FILE="${2}"
    local LIST_FILE="${3}"

    TMP_LIST_CURRENT_FILE="${LIST_CURRENT_FILE}.tmp"
    TMP_LIST_FILE="${LIST_FILE}.tmp"

    set +e
    cat "${LIST_CURRENT_FILE}" | grep -E -v "^#|^$" > "${TMP_LIST_CURRENT_FILE}"
    cat "${LIST_FILE}" | grep -E -v "^#|^$" > "${TMP_LIST_FILE}"

    local CURRENT_COUNT=$(cat "${TMP_LIST_CURRENT_FILE}" | wc -l)
    local DIFF_COUNT=$(diff "${TMP_LIST_CURRENT_FILE}" "${TMP_LIST_FILE}" | grep -E "<|>" | wc -l)
    set -e

    if [[ "${CURRENT_COUNT}" -eq 0 ]]; then
        echo "- ${SET_NAME}: Changes: new (${DIFF_COUNT} / ${CURRENT_COUNT})"
        IS_FORCE="1"
    else
        local DIFF_RATIO=$(echo "scale=5; ${DIFF_COUNT} / ${CURRENT_COUNT} * 100" | bc)
        if [[ "${DIFF_RATIO}" != "0" ]] || [[ "${IS_VERBOSE}" -eq 1 ]]; then
            echo "- ${SET_NAME}: Changes: $(printf "%.2f" ${DIFF_RATIO}) % (${DIFF_COUNT} / ${CURRENT_COUNT})"
        fi
    fi
}

optimize_ipset() {
    local LIST_FILE="${1}"
    local LIST_FILE_OPTIMIZED="${2}"

    if which iprange >/dev/null 2>&1; then
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- optimize: iprange"
        iprange --optimize "${LIST_FILE}" > "${LIST_FILE_OPTIMIZED}"
    else
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- optimize: sort, uniq (NOTICE: iprange is better. https://github.com/firehol/iprange)"
        cat "${LIST_FILE}" | sort | uniq > "${LIST_FILE_OPTIMIZED}"
    fi
}

update_ipset() {
    local SET_NAME="${1}"
    local LIST_FILE="${2}"

    local SET_NAME_TMP="${SET_NAME}_TMP"

    # Create an ipset
    [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ipset create -exist ${SET_NAME} hash:net maxelem ${IPSET_MAXELEM}"
    ipset create -exist "${SET_NAME}" hash:net maxelem ${IPSET_MAXELEM}
    [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ipset create -exist ${SET_NAME_TMP} hash:net maxelem ${IPSET_MAXELEM}"
    ipset create -exist "${SET_NAME_TMP}" hash:net maxelem ${IPSET_MAXELEM}
    [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ipset flush ${SET_NAME_TMP}"
    ipset flush "${SET_NAME_TMP}"

    cat "${LIST_FILE}" | grep -E -v "^#|^$" | sed "s/.*/add ${SET_NAME_TMP} &/g" | ipset restore

    [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ipset swap ${SET_NAME_TMP} ${SET_NAME}"
    ipset swap "${SET_NAME_TMP}" "${SET_NAME}"
    [[ "${IS_VERBOSE}" -eq 1 ]] && echo "- ipset destroy ${SET_NAME_TMP}"
    ipset destroy "${SET_NAME_TMP}"
}

# Main
main() {
     [[ $# -lt 1 ]] && usage && exit 1

    local SET_NAME=""
    declare -a FILE_LIST=()
    declare -a URL_LIST=()
    declare -a EXCLIDE_FILE_LIST=()
    while getopts n:i:u:e:d:fr:tvh OPT; do
        case "${OPT}" in
            "n" )
                SET_NAME="${OPTARG}" ;;
            "i" )
                FILE_LIST+=("${OPTARG}") ;;
            "u" )
                URL_LIST+=("${OPTARG}") ;;
            "e" )
                EXCLIDE_FILE_LIST+=("${OPTARG}") ;;
            "d" )
                STATE_DIR="${OPTARG}" ;;
            "f" )
                IS_FORCE="1" ;;
            "r" )
                ALERT_THRESHOLD_RATIO="${OPTARG}" ;;
            "t" )
                IS_TEMPORARY="1" ;;
            "v" )
                IS_VERBOSE="1" ;;
            "h" )
                usage
                exit 0 ;;
            * )
                usage
                exit 1 ;;
        esac
    done
    shift $((OPTIND - 1))

    if [[ -z "${SET_NAME}" ]] || ( [[ "${#FILE_LIST[@]}" -eq 0 ]] && [[ "${#URL_LIST[@]}" -eq 0 ]] ); then
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# Required option not found"
         usage
         exit 1
    fi

    # Create state directory
    if [[ ! -d "${STATE_DIR}" ]]; then
        mkdir -p "${STATE_DIR}"
    fi

    # If the IP set does not exist, set force mode
    set +e
    local IS_LOADED=$(ipset list -n -t "${SET_NAME}" 2>&1)
    if [[ $? -ne 0 ]]; then
        echo "The set '${SET_NAME}' does not exist. Run in force update mode(-f)."
        IS_FORCE="1"
    fi
    set -e

    # IP list file
    LIST_FILE="${STATE_DIR}/${SET_NAME}"
    echo > "${LIST_FILE}"

    # FILE_LIST: IP set file
    if [[ "${#FILE_LIST[@]}" -ne 0 ]]; then
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# create ${LIST_FILE} (Files: ${#FILE_LIST[@]})"
        file_ipset "${LIST_FILE}" "${FILE_LIST[@]}"

        if [[ ! -f "${LIST_FILE}" ]]; then
            echo "File failed: ${FILE}"
            exit 1
        fi
    fi

    # URL_LIST: Download IP set
    if [[ "${#URL_LIST[@]}" -ne 0 ]]; then
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# download_ipset ${LIST_FILE} (URLs: ${#URL_LIST[@]})"
        download_ipset "${LIST_FILE}" "${URL_LIST[@]}"

        if [[ ! -f "${LIST_FILE}" ]]; then
            echo "Download failed: ${URL}"
            exit 1
        fi
    fi

    # EXCLIDE_FILE_LIST: Exclude IP set file
    if [[ "${#EXCLIDE_FILE_LIST[@]}" -ne 0 ]]; then
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# exclude ${LIST_FILE} (Files: ${#EXCLIDE_FILE_LIST[@]})"
        exclude_ipset "${LIST_FILE}" "${EXCLIDE_FILE_LIST[@]}"
    fi

    # Calculate diff ratio
    local LIST_CURRENT_FILE="${STATE_DIR}/${SET_NAME}.current"
    if [[ ! -f "${LIST_CURRENT_FILE}" ]]; then
        touch "${LIST_CURRENT_FILE}"
    fi
    local DIFF_RATIO="0"
    [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# diff_ratio ${LIST_CURRENT_FILE} ${LIST_FILE}"
    diff_ratio "${SET_NAME}" "${LIST_CURRENT_FILE}" "${LIST_FILE}"

    if [[ "${IS_FORCE}" -ne 1 ]]; then
        local IS_ALERT=$(echo "${ALERT_THRESHOLD_RATIO} <= ${DIFF_RATIO}" | bc)
        if [[ ${IS_ALERT} -eq 1 ]]; then
            echo "ERROR: alert threshold over (${ALERT_THRESHOLD_RATIO})"
            echo "    Force update: $0 -f ..."
            exit 1
        fi
    fi

    # Update IP set
    if [[ "${IS_FORCE}" -eq 1 || "${DIFF_RATIO}" != "0" ]]; then
        # Optimize IP set
        local LIST_FILE_OPTIMIZED="${LIST_FILE}.optimized"
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# optimize_ipset ${LIST_FILE}"
        optimize_ipset "${LIST_FILE}" "${LIST_FILE_OPTIMIZED}"

        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# update_ipset ${SET_NAME} ${LIST_FILE}"
        update_ipset "${SET_NAME}" "${LIST_FILE_OPTIMIZED}"
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# Updated: ${SET_NAME}"

        rm -f "${LIST_FILE_OPTIMIZED}"

        # Save ipset configuration
        if [[ "${IS_TEMPORARY}" -eq 0 ]]; then
            echo "# Save ipset configuration by using /usr/libexec/ipset/ipset.start-stop save"
            # Source ipset configuration
            if [[ -f "${IPSET_CONFIG}" ]]; then
                . "${IPSET_CONFIG}"
            fi

            if [[ "${IPSET_SAVE_ON_STOP}" != "yes" ]]; then
		echo "--------------------------------------------------------------------------------------"
                echo "[WARNING]: IPSET_SAVE_ON_STOP in ${IPSET_CONFIG} is not set to yes."
		echo "It is recommended that you set it to 'yes' for the setting to take effect permanently."
		echo "If you do not want to save the configuration automatically, use the -t option."
		echo "--------------------------------------------------------------------------------------"
            fi
            /usr/libexec/ipset/ipset.start-stop save
        fi
    else
        [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# No need update: ${SET_NAME}"
    fi
    [[ "${IS_VERBOSE}" -eq 1 ]] && echo "# Check set: ipset list -t ${SET_NAME}, ipset list ${SET_NAME}"

    # Save current list file
    yes | mv "${LIST_FILE}" "${LIST_CURRENT_FILE}"
}

[[ ${#BASH_SOURCE[@]} = 1 ]] && main "$@"
